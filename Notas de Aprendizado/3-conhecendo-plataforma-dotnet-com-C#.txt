3.1 - introdução ao .net.

*o que é .net
.net é diferente de c#

.net=> plataforma inificada/framework
C#-> linguagem

*.Net surgio com a finalidade de desemvolver aplicações windows.

*Linha do tempo - ok

.net framework -> legado para windows até v.4.8
.net -> versão atual, multiplataforma era dotnet core que porde o 
core na versão 5.

*Compilador converte linguagem de alto nivel para baixo nivel.

compilador--> C#, Java - alto nivel para baixo nivel

transpilador--> javascript, PHP - alto nivel para alto nivel. 

3.2 - Introdução as IDEs e Configuração de Ambiente .NET

IDE -> Ambiente de desemvolvimento integrado.
VSCode-> editor de texto.

instalar dotnet

sdk - kit desemvolvimento codigo fonte para programar.
runtime - para executar no cliente.

Recursos
    • Documentação do .NET: https://aka.ms/dotnet-docs
    • Documentação do SDK: https://aka.ms/dotnet-sdk-docs
    • Notas sobre a Versão: https://aka.ms/dotnet6-release-notes
    • Tutoriais: https://aka.ms/dotnet-tutorials

criação de um novo projeto
dotnet new terminal --> cria um projeto prompt comando.
dotnet run --> executa o programa.


3.3 Sintaxe e Tipos de Dados em C#
Cuidado com mudança de versão do projeto.
Solution = agrupamento de projetos.

*Classe - Abstração POO.
Atributos -> metodos
Obj mundo real -> Obj na programação p/ implementat ações.
Abstração represente no seu programa.
Ex: Classe Pessoa 
#Atributos
 Nome: string
 Idade: int
#Metodos
 Apresentar()

Metodo = Ação que a classe vai fazer/realizar

****TODO NOME DE CLASSE COMEÇA COM LETRA MAIUSCULA ****
****Representar primeiro atributos depois metodos ****
NameSpace = Caminho para classe.

Convenção = padrão da comunidade
C# = camelCase e PascalCase ;

Tipos de Operadores em C#
= atrobuição, altera o valor
Cast casting = converção entre tipos de dados em variaveis.
Convert. xxx
Parse = converte str para numeros --- int.Parse
Parse não aceita nulo
Convert aceita nulo, melhor forma da usar.
tryparse = maneira segura de realizar uma conversao

Operadores Aritméticos em C#
+
-
*
/
% Modulos, resto da divisao
++
--

nos metodos 
Void = não retorna nada
tipo de dado = faz um retorno, como uma função.
Ex:
public void Somar(int x, int y)
{
   Console.WriteLine($"{x} + {y} = {x + y}");
}

public int Somar(int x, int y)
{
   Console.WriteLine($"{x} + {y} = {x + y}");
   return x+y; 	
}


Propriedades, Métodos e Construtores com C#
get = obtendo valor que armazenou
set = atribuindo valor quando utiliza sinal de =

Editor -> Code Leans - desabilitado para não mostrar se a varial esta em uso.

=> body expressions

enapsulamento = é a proteção de um  campo para ser modificado dentro da classe.

void não retorna nada
int, string, tipo de dado faz retorno;

construtores
criar valores padrão.
todo construtor tem o mesmo nome da sua classe.
não tem um tipo de retorno;

Exceções e Coleções com C#

stack tracing pista do erro.

fila = queue

pilha - stack

dictionary = json.

**Nuget, Serializar e Atributos no C#**

iso 8601 = FORMATO DA DATA, padrão.


